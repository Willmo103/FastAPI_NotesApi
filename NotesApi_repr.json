{
    "NotesApi": {
        ".": {
            ".env": "",
            ".gitignore": "",
            "alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts\nscript_location = alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python-dateutil library that can be\n# installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to dateutil.tz.gettz()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\nsqlalchemy.url =]\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n",
            "Dockerfile": "FROM python:3.10.7\n\nWORKDIR /usr/src/app\n\nCOPY requirements.txt ./\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nEXPOSE 4200:4200\n\n\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"4200\"]\n",
            "gunicorn.service.txt": "[unit]\nDescription=notes_api\nAfter=network.target\n\n[Service]\nUser=will\nGroup=will\nWorkingDirectory=/home/will/notes_api/src\nEnvironment=\"PATH=/home/will/notes_api/venv/bin\"\nExecStart=/home/will/notes_api/venv/bin/gunicorn -w 2 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000\nEnvironmentFile=/home/will/notes_api/.env\n\n[Install]\nWantedBy=multi-user.target\n",
            "nginx.txt": "server {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        server_name _; # replace with specific domain name like memes.com\n\n        location / {\n                proxy_pass http://localhost:4200;\n                proxy_http_version 1.1;\n                proxy_set_header X-Real-IP $remote_addr;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection 'upgrade';\n                proxy_set_header Host $http_host;\n                proxy_set_header X-NginX-Proxy true;\n                proxy_redirect off;\n        }\n\n}\n\n",
            "NotesApi_repr.json": "{\n    \"NotesApi\": {\n        \".\": {\n            \"alembic.ini\": \"# A generic, single database configuration.\\n\\n[alembic]\\n# path to migration scripts\\nscript_location = alembic\\n\\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\\n# Uncomment the line below if you want the files to be prepended with date and time\\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\\n# for all available tokens\\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\\n\\n# sys.path path, will be prepended to sys.path if present.\\n# defaults to the current working directory.\\nprepend_sys_path = .\\n\\n# timezone to use when rendering the date within the migration file\\n# as well as the filename.\\n# If specified, requires the python-dateutil library that can be\\n# installed by adding `alembic[tz]` to the pip requirements\\n# string value is passed to dateutil.tz.gettz()\\n# leave blank for localtime\\n# timezone =\\n\\n# max length of characters to apply to the\\n# \\\"slug\\\" field\\n# truncate_slug_length = 40\\n\\n# set to 'true' to run the environment during\\n# the 'revision' command, regardless of autogenerate\\n# revision_environment = false\\n\\n# set to 'true' to allow .pyc and .pyo files without\\n# a source .py file to be detected as revisions in the\\n# versions/ directory\\n# sourceless = false\\n\\n# version location specification; This defaults\\n# to alembic/versions.  When using multiple version\\n# directories, initial revisions must be specified with --version-path.\\n# The path separator used here should be the separator specified by \\\"version_path_separator\\\" below.\\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\\n\\n# version path separator; As mentioned above, this is the character used to split\\n# version_locations. The default within new alembic.ini files is \\\"os\\\", which uses os.pathsep.\\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\\n# Valid values for version_path_separator are:\\n#\\n# version_path_separator = :\\n# version_path_separator = ;\\n# version_path_separator = space\\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\\n\\n# the output encoding used when revision files\\n# are written from script.py.mako\\n# output_encoding = utf-8\\n\\nsqlalchemy.url =]\\n\\n\\n[post_write_hooks]\\n# post_write_hooks defines scripts or Python functions that are run\\n# on newly generated revision scripts.  See the documentation for further\\n# detail and examples\\n\\n# format using \\\"black\\\" - use the console_scripts runner, against the \\\"black\\\" entrypoint\\n# hooks = black\\n# black.type = console_scripts\\n# black.entrypoint = black\\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\\n\\n# Logging configuration\\n[loggers]\\nkeys = root,sqlalchemy,alembic\\n\\n[handlers]\\nkeys = console\\n\\n[formatters]\\nkeys = generic\\n\\n[logger_root]\\nlevel = WARN\\nhandlers = console\\nqualname =\\n\\n[logger_sqlalchemy]\\nlevel = WARN\\nhandlers =\\nqualname = sqlalchemy.engine\\n\\n[logger_alembic]\\nlevel = INFO\\nhandlers =\\nqualname = alembic\\n\\n[handler_console]\\nclass = StreamHandler\\nargs = (sys.stderr,)\\nlevel = NOTSET\\nformatter = generic\\n\\n[formatter_generic]\\nformat = %(levelname)-5.5s [%(name)s] %(message)s\\ndatefmt = %H:%M:%S\\n\",\n            \"Dockerfile\": \"FROM python:3.10.7\\n\\nWORKDIR /usr/src/app\\n\\nCOPY requirements.txt ./\\n\\nRUN pip install --no-cache-dir -r requirements.txt\\n\\nCOPY . .\\n\\nEXPOSE 4200:4200\\n\\n\\n\\nCMD [\\\"uvicorn\\\", \\\"app.main:app\\\", \\\"--host\\\", \\\"0.0.0.0\\\", \\\"--port\\\", \\\"4200\\\"]\\n\",\n            \"gunicorn.service.txt\": \"[unit]\\nDescription=notes_api\\nAfter=network.target\\n\\n[Service]\\nUser=will\\nGroup=will\\nWorkingDirectory=/home/will/notes_api/src\\nEnvironment=\\\"PATH=/home/will/notes_api/venv/bin\\\"\\nExecStart=/home/will/notes_api/venv/bin/gunicorn -w 2 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000\\nEnvironmentFile=/home/will/notes_api/.env\\n\\n[Install]\\nWantedBy=multi-user.target\\n\",\n            \"nginx.txt\": \"server {\\n        listen 80 default_server;\\n        listen [::]:80 default_server;\\n\\n        server_name _; # replace with specific domain name like memes.com\\n\\n        location / {\\n                proxy_pass http://localhost:4200;\\n                proxy_http_version 1.1;\\n                proxy_set_header X-Real-IP $remote_addr;\\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n                proxy_set_header Upgrade $http_upgrade;\\n                proxy_set_header Connection 'upgrade';\\n                proxy_set_header Host $http_host;\\n                proxy_set_header X-NginX-Proxy true;\\n                proxy_redirect off;\\n        }\\n\\n}\\n\\n\",\n            \"requirements.txt\": \"anyio==3.6.2\\ncertifi==2022.12.7\\ncffi==1.15.1\\nclick==8.1.3\\ncolorama==0.4.6\\ncryptography==39.0.0\\ndnspython==2.3.0\\necdsa==0.18.0\\nemail-validator==1.3.0\\nfastapi==0.89.1\\ngreenlet==2.0.1\\nh11==0.14.0\\nhttpcore==0.16.3\\nhttptools==0.5.0\\nhttpx==0.23.3\\nidna==3.4\\nitsdangerous==2.1.2\\nJinja2==3.1.2\\nMarkupSafe==2.1.1\\norjson==3.8.5\\npsycopg2==2.9.5\\npyasn1==0.4.8\\npycparser==2.21\\npydantic==1.10.4\\npython-dotenv==0.21.0\\npython-jose==3.3.0\\npython-multipart==0.0.5\\nPyYAML==6.0\\nrfc3986==1.5.0\\nrsa==4.9\\nsix==1.16.0\\nsniffio==1.3.0\\nSQLAlchemy==1.4.46\\nstarlette==0.22.0\\ntyping_extensions==4.4.0\\nujson==5.7.0\\nuvicorn==0.20.0\\nwatchfiles==0.18.1\\nwebsockets==10.4\\n\"\n        },\n        \".git\": {},\n        \"alembic\": {\n            \"env.py\": \"from logging.config import fileConfig\\n\\nfrom sqlalchemy import engine_from_config\\nfrom sqlalchemy import pool\\nfrom app.config import settings\\nfrom alembic import context\\nfrom app.models import Base\\n\\n# this is the Alembic Config object, which provides\\n# access to the values within the .ini file in use.\\nconfig = context.config\\nconfig.set_main_option(\\n    \\\"sqlalchemy.url\\\", f\\\"postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}/{settings.database_name}\\\",\\n)\\n\\n# Interpret the config file for Python logging.\\n# This line sets up loggers basically.\\nif config.config_file_name is not None:\\n    fileConfig(config.config_file_name)\\n\\n# add your model's MetaData object here\\n# for 'autogenerate' support\\n# from myapp import mymodel\\n# target_metadata = mymodel.Base.metadata\\ntarget_metadata = Base.metadata\\n\\n# other values from the config, defined by the needs of env.py,\\n# can be acquired:\\n# my_important_option = config.get_main_option(\\\"my_important_option\\\")\\n# ... etc.\\n\\n\\ndef run_migrations_offline() -> None:\\n    \\\"\\\"\\\"Run migrations in 'offline' mode.\\n\\n    This configures the context with just a URL\\n    and not an Engine, though an Engine is acceptable\\n    here as well.  By skipping the Engine creation\\n    we don't even need a DBAPI to be available.\\n\\n    Calls to context.execute() here emit the given string to the\\n    script output.\\n\\n    \\\"\\\"\\\"\\n    url = config.get_main_option(\\\"sqlalchemy.url\\\")\\n    context.configure(\\n        url=url,\\n        target_metadata=target_metadata,\\n        literal_binds=True,\\n        dialect_opts={\\\"paramstyle\\\": \\\"named\\\"},\\n    )\\n\\n    with context.begin_transaction():\\n        context.run_migrations()\\n\\n\\ndef run_migrations_online() -> None:\\n    \\\"\\\"\\\"Run migrations in 'online' mode.\\n\\n    In this scenario we need to create an Engine\\n    and associate a connection with the context.\\n\\n    \\\"\\\"\\\"\\n    connectable = engine_from_config(\\n        config.get_section(config.config_ini_section),\\n        prefix=\\\"sqlalchemy.\\\",\\n        poolclass=pool.NullPool,\\n    )\\n\\n    with connectable.connect() as connection:\\n        context.configure(connection=connection, target_metadata=target_metadata)\\n\\n        with context.begin_transaction():\\n            context.run_migrations()\\n\\n\\nif context.is_offline_mode():\\n    run_migrations_offline()\\nelse:\\n    run_migrations_online()\\n\",\n            \"README\": \"Generic single-database configuration.\",\n            \"script.py.mako\": \"\\\"\\\"\\\"${message}\\n\\nRevision ID: ${up_revision}\\nRevises: ${down_revision | comma,n}\\nCreate Date: ${create_date}\\n\\n\\\"\\\"\\\"\\nfrom alembic import op\\nimport sqlalchemy as sa\\n${imports if imports else \\\"\\\"}\\n\\n# revision identifiers, used by Alembic.\\nrevision = ${repr(up_revision)}\\ndown_revision = ${repr(down_revision)}\\nbranch_labels = ${repr(branch_labels)}\\ndepends_on = ${repr(depends_on)}\\n\\n\\ndef upgrade() -> None:\\n    ${upgrades if upgrades else \\\"pass\\\"}\\n\\n\\ndef downgrade() -> None:\\n    ${downgrades if downgrades else \\\"pass\\\"}\\n\",\n            \"versions\": {\n                \"ace7e481e517_initialize_tables.py\": \"\\\"\\\"\\\"Initialize tables\\n\\nRevision ID: ace7e481e517\\nRevises: \\nCreate Date: 2023-01-17 15:12:35.479763\\n\\n\\\"\\\"\\\"\\nfrom alembic import op\\nimport sqlalchemy as sa\\n\\n\\n# revision identifiers, used by Alembic.\\nrevision = 'ace7e481e517'\\ndown_revision = None\\nbranch_labels = None\\ndepends_on = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.create_table('user',\\n    sa.Column('id', sa.Integer(), nullable=False),\\n    sa.Column('password', sa.String(), nullable=False),\\n    sa.Column('name', sa.String(), nullable=False),\\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    op.create_table('photo',\\n    sa.Column('id', sa.Integer(), nullable=False),\\n    sa.Column('owner_id', sa.Integer(), nullable=True),\\n    sa.Column('content', sa.String(), nullable=True),\\n    sa.Column('title', sa.String(), nullable=False),\\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.drop_table('photo')\\n    op.drop_table('user')\\n    # ### end Alembic commands ###\\n\",\n                \"e4380a465402_fixing_table_name_whoopsie.py\": \"\\\"\\\"\\\"fixing table name whoopsie\\n\\nRevision ID: e4380a465402\\nRevises: ace7e481e517\\nCreate Date: 2023-01-17 15:46:26.876763\\n\\n\\\"\\\"\\\"\\nfrom alembic import op\\nimport sqlalchemy as sa\\nfrom sqlalchemy.dialects import postgresql\\n\\n# revision identifiers, used by Alembic.\\nrevision = 'e4380a465402'\\ndown_revision = 'ace7e481e517'\\nbranch_labels = None\\ndepends_on = None\\n\\n\\ndef upgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.create_table('note',\\n    sa.Column('id', sa.Integer(), nullable=False),\\n    sa.Column('owner_id', sa.Integer(), nullable=True),\\n    sa.Column('content', sa.String(), nullable=True),\\n    sa.Column('title', sa.String(), nullable=False),\\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),\\n    sa.PrimaryKeyConstraint('id')\\n    )\\n    op.drop_table('photo')\\n    # ### end Alembic commands ###\\n\\n\\ndef downgrade() -> None:\\n    # ### commands auto generated by Alembic - please adjust! ###\\n    op.create_table('photo',\\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\\n    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),\\n    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),\\n    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),\\n    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),\\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='photo_owner_id_fkey', ondelete='CASCADE'),\\n    sa.PrimaryKeyConstraint('id', name='photo_pkey')\\n    )\\n    op.drop_table('note')\\n    # ### end Alembic commands ###\\n\"\n            }\n        },\n        \"app\": {\n            \"config.py\": \"from pydantic import BaseSettings\\nfrom pathlib import Path\\n\\n\\nclass Settings(BaseSettings):\\n    database_username: str\\n    database_password: str\\n    database_hostname: str\\n    database_port: int\\n    database_name: str\\n\\n    class Config:\\n        env_file = \\\"C:\\\\\\\\Users\\\\Willm\\\\Desktop\\\\\\\\NotesApi\\\\\\\\.env\\\"\\n\\n\\nsettings = Settings()\\n\",\n            \"database.py\": \"from sqlalchemy import create_engine\\nfrom sqlalchemy.ext.declarative import declarative_base\\nfrom sqlalchemy.orm import sessionmaker\\n\\nfrom app.config import settings\\n# from os import environ as env\\n\\n\\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@' \\\\\\n                          f'{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\\n\\n# SQLALCHEMY_DATABASE_URL = (\\n#     f'postgresql://{env.get(\\\"DATABASE_USERNAME\\\")}:{env.get(\\\"DATABASE_PASSWORD\\\")}@'\\n#     f'{env.get(\\\"DATABASE_HOSTNAME\\\")}:{env.get(\\\"DATABASE_PORT\\\")}/{env.get(\\\"DATABASE_NAME\\\")}'\\n# )\\n\\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\\n\\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\\n\\nBase = declarative_base()\\n\\n\\ndef get_db():\\n    db = SessionLocal()\\n    try:\\n        yield db\\n    finally:\\n        db.close()\\n\",\n            \"main.py\": \"from fastapi import FastAPI, Depends, Request\\nfrom fastapi.templating import Jinja2Templates\\nfrom fastapi.responses import HTMLResponse, RedirectResponse\\nfrom starlette.middleware.cors import CORSMiddleware\\nfrom sqlalchemy.orm import Session\\nfrom pathlib import Path\\nfrom app.database import get_db\\nfrom app.models import Note\\n\\nBASE_PATH = Path(__file__).resolve().parent\\ntemplates = Jinja2Templates(directory=str(BASE_PATH / \\\"templates\\\"))\\n\\napp = FastAPI()\\n\\norigins = [\\\"*\\\"]\\n\\napp.add_middleware(\\n    CORSMiddleware,\\n    allow_origins=origins,\\n    allow_credentials=True,\\n    allow_methods=[\\\"*\\\"],\\n    allow_headers=[\\\"*\\\"],\\n)\\n\\n@app.get(\\\"/home\\\", response_class=HTMLResponse)\\nasync def home_page(req: Request, db: Session = Depends(get_db)):\\n    notes = db.query(Note).all()\\n    return templates.TemplateResponse(\\\"home.html\\\", {'request': req, 'notes': notes})\\n\\n@app.post(\\\"/notes\\\")\\nasync def new_note(req: Request, db: Session = Depends(get_db)):\\n    form_data = await req.form()\\n    title = form_data['title']\\n    content = form_data['content']\\n    note = {'content': content, \\\"owner_id\\\": 1, \\\"title\\\": title}\\n    new_note = Note(**note)\\n    db.add(new_note)\\n    db.commit()\\n    return templates.TemplateResponse(\\\"note.html\\\", {\\\"request\\\": req})\\n\\n@app.post(\\\"/notes/{id}\\\", response_class=RedirectResponse)\\nasync def save_note(id: int, req: Request, db: Session = Depends(get_db)):\\n    form_data = await req.form()\\n    content = form_data[\\\"noteContent\\\"]\\n    note_query = db.query(Note).filter(Note.id == id)\\n    note_query.update({\\\"content\\\": content}, synchronize_session=False)\\n    db.commit()\\n    return templates.TemplateResponse(\\\"note.html\\\", {\\\"request\\\": req})\\n\\n@app.get(\\\"/notes/{id}\\\", response_class=HTMLResponse)\\nasync def delete_note(id: int, req: Request, db: Session = Depends(get_db)):\\n    note_query = db.query(Note).filter(Note.id == id).first()\\n    db.delete(note_query)\\n    db.commit()\\n    return templates.TemplateResponse(\\\"note.html\\\", {\\\"request\\\": req})\\n\",\n            \"models.py\": \"from sqlalchemy import Column, String, Integer, TIMESTAMP, text, ForeignKey\\nfrom app.database import Base\\n\\n\\nclass User(Base):\\n    __tablename__ = \\\"user\\\"\\n\\n    id = Column(\\n        Integer,\\n        primary_key=True,\\n        nullable=False\\n    )\\n\\n    password = Column(\\n        String,\\n        nullable=False\\n    )\\n\\n    name = Column(\\n        String,\\n        nullable=False\\n    )\\n\\n    created_at = Column(\\n        TIMESTAMP(timezone=True),\\n        nullable=False,\\n        server_default=text(\\\"now()\\\")\\n    )\\n\\n\\n\\nclass Note(Base):\\n    __tablename__ = \\\"note\\\"\\n\\n    id = Column(\\n        Integer,\\n        primary_key=True,\\n        nullable=False\\n    )\\n\\n    owner_id = Column(\\n        Integer,\\n        ForeignKey(\\n            \\\"user.id\\\",\\n            ondelete=\\\"CASCADE\\\"\\n        ),\\n        nullable=True,\\n    )\\n\\n    content = Column(\\n        String,\\n        nullable=True\\n    )\\n\\n    title = Column(\\n        String,\\n        nullable=False\\n    )\\n\\n    created_at = Column(\\n        TIMESTAMP(\\n            timezone=True\\n        ),\\n        nullable=False,\\n        server_default=text(\\\"now()\\\")\\n    )\\n\\n\",\n            \"__init__.py\": \"\",\n            \"templates\": {\n                \"home.html\": \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\\\"\\n      integrity=\\\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    />\\n    <script\\n      src=\\\"https://code.jquery.com/jquery-3.5.1.slim.min.js\\\"\\n      integrity=\\\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script\\n      src=\\\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.13.0/dist/umd/popper.min.js\\\"\\n      integrity=\\\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script\\n      src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\\\"\\n      integrity=\\\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script>\\n      $(document).ready(function () {\\n        $(\\\"#noteModal\\\").on(\\\"show.bs.modal\\\", function (event) {\\n          var button = $(event.relatedTarget);\\n          var noteId = button.data(\\\"note-id\\\");\\n          var modal = $(this);\\n          modal.find(\\\"form\\\").attr(\\\"action\\\", \\\"/notes/\\\" + noteId);\\n          modal.find(\\\"#noteContent\\\").val(button.data(\\\"note-content\\\"));\\n        });\\n      });\\n    </script>\\n  </head>\\n\\n  <body>\\n    <nav class=\\\"navbar navbar-dark navbar-expand-lg bg-dark\\\">\\n      <div class=\\\"container-fluid center-block\\\">\\n        <a class=\\\"navbar-brand\\\" href=\\\"index.html\\\">Desk_Notes</a>\\n        <button\\n          class=\\\"navbar-toggler\\\"\\n          type=\\\"button\\\"\\n          data-bs-toggle=\\\"collapse\\\"\\n          data-bs-target=\\\"#navbarNav\\\"\\n          aria-controls=\\\"navbarNav\\\"\\n          aria-expanded=\\\"false\\\"\\n          aria-label=\\\"Toggle navigation\\\"\\n        >\\n          <span class=\\\"navbar-toggler-icon\\\"></span>\\n        </button>\\n        <button\\n          type=\\\"button\\\"\\n          class=\\\"btn btn-primary btn\\\"\\n          data-toggle=\\\"modal\\\"\\n          data-target=\\\"#newNoteModal\\\"\\n        >\\n          New Note\\n        </button>\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\n          <ul class=\\\"navbar-nav\\\" id=\\\"links\\\"></ul>\\n        </div>\\n      </div>\\n    </nav>\\n    <div class=\\\"container\\\" style=\\\"margin-top: 4px; margin-bottom: 4px\\\">\\n      <div class=\\\"row\\\">\\n        {% for note in notes %}\\n        <div class=\\\"col-md-4\\\">\\n          <div class=\\\"card\\\" style=\\\"margin: 4px\\\">\\n            <div class=\\\"card-header\\\">\\n              <h5 class=\\\"card-title\\\">{{ note.title }}</h5>\\n            </div>\\n            <div class=\\\"card-body\\\">\\n              <p class=\\\"card-text\\\">{{ note.content }}</p>\\n              <hr />\\n              <div class=\\\"row\\\" style=\\\"margin-left: 2px\\\">\\n                <button\\n                  type=\\\"button\\\"\\n                  class=\\\"btn btn-primary btn-sm\\\"\\n                  data-toggle=\\\"modal\\\"\\n                  data-target=\\\"#noteModal\\\"\\n                  data-note-id=\\\"{{ note.id }}\\\"\\n                  data-note-content=\\\"{{ note.content }}\\\"\\n                >\\n                  Edit Note\\n                </button>\\n                <div class=\\\"left-block\\\">\\n                  <form method=\\\"\\\" action=\\\"/notes/{{ note.id }}\\\">\\n                    <input type=\\\"hidden\\\" name=\\\"_method\\\" value=\\\"DELETE\\\" />\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-danger btn-sm\\\">\\n                      Delete\\n                    </button>\\n                  </form>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        {% endfor %}\\n      </div>\\n    </div>\\n    <div class=\\\"modal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" id=\\\"noteModal\\\">\\n      <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\">\\n          <form method=\\\"post\\\" action=\\\"\\\">\\n            <div class=\\\"modal-header\\\">\\n              <h5 class=\\\"modal-title\\\">Edit Note</h5>\\n              <button\\n                type=\\\"button\\\"\\n                class=\\\"close\\\"\\n                data-dismiss=\\\"modal\\\"\\n                aria-label=\\\"Close\\\"\\n              >\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\n              </button>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              <textarea\\n                class=\\\"form-control\\\"\\n                id=\\\"noteContent\\\"\\n                name=\\\"noteContent\\\"\\n                rows=\\\"3\\\"\\n              ></textarea>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button\\n                type=\\\"button\\\"\\n                class=\\\"btn btn-secondary\\\"\\n                data-dismiss=\\\"modal\\\"\\n              >\\n                Close\\n              </button>\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\n                Save changes\\n              </button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"container center-block\\\"></div>\\n    <div\\n      class=\\\"modal fade\\\"\\n      id=\\\"newNoteModal\\\"\\n      tabindex=\\\"-1\\\"\\n      role=\\\"dialog\\\"\\n      aria-labelledby=\\\"newNoteModalLabel\\\"\\n      aria-hidden=\\\"true\\\"\\n    >\\n      <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header\\\">\\n            <h5 class=\\\"modal-title\\\" id=\\\"newNoteModalLabel\\\">New Note</h5>\\n            <button\\n              type=\\\"button\\\"\\n              class=\\\"close\\\"\\n              data-dismiss=\\\"modal\\\"\\n              aria-label=\\\"Close\\\"\\n            >\\n              <span aria-hidden=\\\"true\\\">&times;</span>\\n            </button>\\n          </div>\\n          <form method=\\\"post\\\" action=\\\"/notes/\\\">\\n            <div class=\\\"modal-body\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"noteTitle\\\">Title</label>\\n                <input\\n                  type=\\\"text\\\"\\n                  class=\\\"form-control\\\"\\n                  id=\\\"noteTitle\\\"\\n                  name=\\\"title\\\"\\n                  placeholder=\\\"Enter a title for your note\\\"\\n                />\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"noteContent\\\">Content</label>\\n                <textarea\\n                  class=\\\"form-control\\\"\\n                  id=\\\"noteContent\\\"\\n                  name=\\\"content\\\"\\n                  placeholder=\\\"Enter content for your note\\\"\\n                ></textarea>\\n              </div>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button\\n                type=\\\"button\\\"\\n                class=\\\"btn btn-secondary\\\"\\n                data-dismiss=\\\"modal\\\"\\n              >\\n                Close\\n              </button>\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\n                Save changes\\n              </button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div\\n      class=\\\"modal fade\\\"\\n      id=\\\"noteModal\\\"\\n      tabindex=\\\"-1\\\"\\n      role=\\\"dialog\\\"\\n      aria-labelledby=\\\"noteModalLabel\\\"\\n      aria-hidden=\\\"true\\\"\\n    >\\n      <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\">\\n          <div class=\\\"modal-header\\\">\\n            <h5 class=\\\"modal-title\\\" id=\\\"noteModalLabel\\\">Edit Note</h5>\\n            <button\\n              type=\\\"button\\\"\\n              class=\\\"close\\\"\\n              data-dismiss=\\\"modal\\\"\\n              aria-label=\\\"Close\\\"\\n            >\\n              <span aria-hidden=\\\"true\\\">&times;</span>\\n            </button>\\n          </div>\\n          <form method=\\\"post\\\" action=\\\"\\\">\\n            <div class=\\\"modal-body\\\">\\n              <textarea\\n                class=\\\"form-control\\\"\\n                id=\\\"noteContent\\\"\\n                name=\\\"noteContent\\\"\\n              ></textarea>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button\\n                type=\\\"button\\\"\\n                class=\\\"btn btn-secondary\\\"\\n                data-dismiss=\\\"modal\\\"\\n              >\\n                Close\\n              </button>\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">\\n                Save changes\\n              </button>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </body>\\n</html>\\n\",\n                \"note.html\": \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <link\\n      rel=\\\"stylesheet\\\"\\n      href=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\\\"\\n      integrity=\\\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    />\\n    <script\\n      src=\\\"https://code.jquery.com/jquery-3.5.1.slim.min.js\\\"\\n      integrity=\\\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script\\n      src=\\\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.13.0/dist/umd/popper.min.js\\\"\\n      integrity=\\\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script\\n      src=\\\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\\\"\\n      integrity=\\\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\\\"\\n      crossorigin=\\\"anonymous\\\"\\n    ></script>\\n    <script>\\n      window.addEventListener(\\\"load\\\", function () {\\n        setTimeout(() => {\\n          window.location = \\\"http://192.168.1.208:4200/home\\\";\\n        }, 50);\\n      });\\n    </script>\\n  </head>\\n</html>\\n\"\n            }\n        },\n        \"venv\": {}\n    }\n}",
            "requirements.txt": "anyio==3.6.2\ncertifi==2022.12.7\ncffi==1.15.1\nclick==8.1.3\ncolorama==0.4.6\ncryptography==39.0.0\ndnspython==2.3.0\necdsa==0.18.0\nemail-validator==1.3.0\nfastapi==0.89.1\ngreenlet==2.0.1\nh11==0.14.0\nhttpcore==0.16.3\nhttptools==0.5.0\nhttpx==0.23.3\nidna==3.4\nitsdangerous==2.1.2\nJinja2==3.1.2\nMarkupSafe==2.1.1\norjson==3.8.5\npsycopg2==2.9.5\npyasn1==0.4.8\npycparser==2.21\npydantic==1.10.4\npython-dotenv==0.21.0\npython-jose==3.3.0\npython-multipart==0.0.5\nPyYAML==6.0\nrfc3986==1.5.0\nrsa==4.9\nsix==1.16.0\nsniffio==1.3.0\nSQLAlchemy==1.4.46\nstarlette==0.22.0\ntyping_extensions==4.4.0\nujson==5.7.0\nuvicorn==0.20.0\nwatchfiles==0.18.1\nwebsockets==10.4\n"
        },
        ".git": {},
        "alembic": {
            "env.py": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom app.config import settings\nfrom alembic import context\nfrom app.models import Base\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nconfig.set_main_option(\n    \"sqlalchemy.url\", f\"postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}/{settings.database_name}\",\n)\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n",
            "README": "Generic single-database configuration.",
            "script.py.mako": "\"\"\"${message}\n\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n${imports if imports else \"\"}\n\n# revision identifiers, used by Alembic.\nrevision = ${repr(up_revision)}\ndown_revision = ${repr(down_revision)}\nbranch_labels = ${repr(branch_labels)}\ndepends_on = ${repr(depends_on)}\n\n\ndef upgrade() -> None:\n    ${upgrades if upgrades else \"pass\"}\n\n\ndef downgrade() -> None:\n    ${downgrades if downgrades else \"pass\"}\n",
            "versions": {
                "ace7e481e517_initialize_tables.py": "\"\"\"Initialize tables\n\nRevision ID: ace7e481e517\nRevises: \nCreate Date: 2023-01-17 15:12:35.479763\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'ace7e481e517'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('password', sa.String(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('photo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('owner_id', sa.Integer(), nullable=True),\n    sa.Column('content', sa.String(), nullable=True),\n    sa.Column('title', sa.String(), nullable=False),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('photo')\n    op.drop_table('user')\n    # ### end Alembic commands ###\n",
                "e4380a465402_fixing_table_name_whoopsie.py": "\"\"\"fixing table name whoopsie\n\nRevision ID: e4380a465402\nRevises: ace7e481e517\nCreate Date: 2023-01-17 15:46:26.876763\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision = 'e4380a465402'\ndown_revision = 'ace7e481e517'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('note',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('owner_id', sa.Integer(), nullable=True),\n    sa.Column('content', sa.String(), nullable=True),\n    sa.Column('title', sa.String(), nullable=False),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.drop_table('photo')\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('photo',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\n    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),\n    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),\n    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),\n    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='photo_owner_id_fkey', ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('id', name='photo_pkey')\n    )\n    op.drop_table('note')\n    # ### end Alembic commands ###\n",
                "__pycache__": {}
            },
            "__pycache__": {}
        },
        "app": {
            "config.py": "from pydantic import BaseSettings\nfrom pathlib import Path\n\n\nclass Settings(BaseSettings):\n    database_username: str\n    database_password: str\n    database_hostname: str\n    database_port: int\n    database_name: str\n\n    class Config:\n        env_file = \"C:\\\\Users\\Willm\\Desktop\\\\NotesApi\\\\.env\"\n\n\nsettings = Settings()\n",
            "database.py": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nfrom app.config import settings\n# from os import environ as env\n\n\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@' \\\n                          f'{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\n\n# SQLALCHEMY_DATABASE_URL = (\n#     f'postgresql://{env.get(\"DATABASE_USERNAME\")}:{env.get(\"DATABASE_PASSWORD\")}@'\n#     f'{env.get(\"DATABASE_HOSTNAME\")}:{env.get(\"DATABASE_PORT\")}/{env.get(\"DATABASE_NAME\")}'\n# )\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n",
            "main.py": "from fastapi import FastAPI, Depends, Request\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom starlette.middleware.cors import CORSMiddleware\nfrom sqlalchemy.orm import Session\nfrom pathlib import Path\nfrom app.database import get_db\nfrom app.models import Note\n\nBASE_PATH = Path(__file__).resolve().parent\ntemplates = Jinja2Templates(directory=str(BASE_PATH / \"templates\"))\n\napp = FastAPI()\n\norigins = [\"*\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.get(\"/home\", response_class=HTMLResponse)\nasync def home_page(req: Request, db: Session = Depends(get_db)):\n    notes = db.query(Note).all()\n    return templates.TemplateResponse(\"home.html\", {'request': req, 'notes': notes})\n\n@app.post(\"/notes\")\nasync def new_note(req: Request, db: Session = Depends(get_db)):\n    form_data = await req.form()\n    title = form_data['title']\n    content = form_data['content']\n    note = {'content': content, \"owner_id\": 1, \"title\": title}\n    new_note = Note(**note)\n    db.add(new_note)\n    db.commit()\n    return templates.TemplateResponse(\"note.html\", {\"request\": req})\n\n@app.post(\"/notes/{id}\", response_class=RedirectResponse)\nasync def save_note(id: int, req: Request, db: Session = Depends(get_db)):\n    form_data = await req.form()\n    content = form_data[\"noteContent\"]\n    note_query = db.query(Note).filter(Note.id == id)\n    note_query.update({\"content\": content}, synchronize_session=False)\n    db.commit()\n    return templates.TemplateResponse(\"note.html\", {\"request\": req})\n\n@app.get(\"/notes/{id}\", response_class=HTMLResponse)\nasync def delete_note(id: int, req: Request, db: Session = Depends(get_db)):\n    note_query = db.query(Note).filter(Note.id == id).first()\n    db.delete(note_query)\n    db.commit()\n    return templates.TemplateResponse(\"note.html\", {\"request\": req})\n",
            "models.py": "from sqlalchemy import Column, String, Integer, TIMESTAMP, text, ForeignKey\nfrom app.database import Base\n\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id = Column(\n        Integer,\n        primary_key=True,\n        nullable=False\n    )\n\n    password = Column(\n        String,\n        nullable=False\n    )\n\n    name = Column(\n        String,\n        nullable=False\n    )\n\n    created_at = Column(\n        TIMESTAMP(timezone=True),\n        nullable=False,\n        server_default=text(\"now()\")\n    )\n\n\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id = Column(\n        Integer,\n        primary_key=True,\n        nullable=False\n    )\n\n    owner_id = Column(\n        Integer,\n        ForeignKey(\n            \"user.id\",\n            ondelete=\"CASCADE\"\n        ),\n        nullable=True,\n    )\n\n    content = Column(\n        String,\n        nullable=True\n    )\n\n    title = Column(\n        String,\n        nullable=False\n    )\n\n    created_at = Column(\n        TIMESTAMP(\n            timezone=True\n        ),\n        nullable=False,\n        server_default=text(\"now()\")\n    )\n\n",
            "__init__.py": "",
            "templates": {
                "home.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n      integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\n      crossorigin=\"anonymous\"\n    />\n    <script\n      src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"\n      integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.13.0/dist/umd/popper.min.js\"\n      integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"\n      integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script>\n      $(document).ready(function () {\n        $(\"#noteModal\").on(\"show.bs.modal\", function (event) {\n          var button = $(event.relatedTarget);\n          var noteId = button.data(\"note-id\");\n          var modal = $(this);\n          modal.find(\"form\").attr(\"action\", \"/notes/\" + noteId);\n          modal.find(\"#noteContent\").val(button.data(\"note-content\"));\n        });\n      });\n    </script>\n  </head>\n\n  <body>\n    <nav class=\"navbar navbar-dark navbar-expand-lg bg-dark\">\n      <div class=\"container-fluid center-block\">\n        <a class=\"navbar-brand\" href=\"index.html\">Desk_Notes</a>\n        <button\n          class=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-primary btn\"\n          data-toggle=\"modal\"\n          data-target=\"#newNoteModal\"\n        >\n          New Note\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav\" id=\"links\"></ul>\n        </div>\n      </div>\n    </nav>\n    <div class=\"container\" style=\"margin-top: 4px; margin-bottom: 4px\">\n      <div class=\"row\">\n        {% for note in notes %}\n        <div class=\"col-md-4\">\n          <div class=\"card\" style=\"margin: 4px\">\n            <div class=\"card-header\">\n              <h5 class=\"card-title\">{{ note.title }}</h5>\n            </div>\n            <div class=\"card-body\">\n              <p class=\"card-text\">{{ note.content }}</p>\n              <hr />\n              <div class=\"row\" style=\"margin-left: 2px\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-primary btn-sm\"\n                  data-toggle=\"modal\"\n                  data-target=\"#noteModal\"\n                  data-note-id=\"{{ note.id }}\"\n                  data-note-content=\"{{ note.content }}\"\n                >\n                  Edit Note\n                </button>\n                <div class=\"left-block\">\n                  <form method=\"\" action=\"/notes/{{ note.id }}\">\n                    <input type=\"hidden\" name=\"_method\" value=\"DELETE\" />\n                    <button type=\"submit\" class=\"btn btn-danger btn-sm\">\n                      Delete\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        {% endfor %}\n      </div>\n    </div>\n    <div class=\"modal\" tabindex=\"-1\" role=\"dialog\" id=\"noteModal\">\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n          <form method=\"post\" action=\"\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Edit Note</h5>\n              <button\n                type=\"button\"\n                class=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div class=\"modal-body\">\n              <textarea\n                class=\"form-control\"\n                id=\"noteContent\"\n                name=\"noteContent\"\n                rows=\"3\"\n              ></textarea>\n            </div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                Save changes\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n    <div class=\"container center-block\"></div>\n    <div\n      class=\"modal fade\"\n      id=\"newNoteModal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"newNoteModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"newNoteModalLabel\">New Note</h5>\n            <button\n              type=\"button\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <form method=\"post\" action=\"/notes/\">\n            <div class=\"modal-body\">\n              <div class=\"form-group\">\n                <label for=\"noteTitle\">Title</label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  id=\"noteTitle\"\n                  name=\"title\"\n                  placeholder=\"Enter a title for your note\"\n                />\n              </div>\n              <div class=\"form-group\">\n                <label for=\"noteContent\">Content</label>\n                <textarea\n                  class=\"form-control\"\n                  id=\"noteContent\"\n                  name=\"content\"\n                  placeholder=\"Enter content for your note\"\n                ></textarea>\n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                Save changes\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"modal fade\"\n      id=\"noteModal\"\n      tabindex=\"-1\"\n      role=\"dialog\"\n      aria-labelledby=\"noteModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"noteModalLabel\">Edit Note</h5>\n            <button\n              type=\"button\"\n              class=\"close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n            >\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <form method=\"post\" action=\"\">\n            <div class=\"modal-body\">\n              <textarea\n                class=\"form-control\"\n                id=\"noteContent\"\n                name=\"noteContent\"\n              ></textarea>\n            </div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n              <button type=\"submit\" class=\"btn btn-primary\">\n                Save changes\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </body>\n</html>\n",
                "note.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n      integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\n      crossorigin=\"anonymous\"\n    />\n    <script\n      src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"\n      integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.13.0/dist/umd/popper.min.js\"\n      integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"\n      integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script>\n      window.addEventListener(\"load\", function () {\n        setTimeout(() => {\n          window.location = \"http://192.168.1.208:4200/home\";\n        }, 50);\n      });\n    </script>\n  </head>\n</html>\n"
            },
            "__pycache__": {}
        },
        "venv": {}
    }
}